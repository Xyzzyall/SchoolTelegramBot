from injector import inject

from voice_bot.domain.context import Context
from voice_bot.domain.services.actions_logger import ActionsLoggerService
from voice_bot.misc.datetime_service import DatetimeService, dt_fmt
from voice_bot.telegram_bot.navigation.views.text_view import TextView
from voice_bot.telegram_di_scope import telegramupdate


@telegramupdate
class StudentSubscriptions(TextView):
    @inject
    def __init__(self, log: ActionsLoggerService, dt: DatetimeService, context: Context):
        super().__init__()
        self._user = context.authorized_user
        self._dt = dt
        self._log = log

    async def get_message_text(self) -> str:
        now = self._dt.now()
        subs = await self._log.count_subscriptions_on_date(self._user, now)
        res = []
        for sub in subs:
            if sub.is_stub or not sub.is_valid(now):
                continue
            res.append(f"*–ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å {dt_fmt(sub.valid_from)} –ø–æ {dt_fmt(sub.valid_to)}*")
            res.append(f"- —É—Ä–æ–∫–æ–≤ –ø—Ä–æ—à–ª–æ: {sub.counted_lessons} –∏–∑ {sub.lessons}")
            res.append(f"- –æ—Ç–º–µ–Ω: {sub.counted_cancellations} –∏–∑ {sub.cancellations}")
            res.append("")

        if not res:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ ü§î\n\n" \
                   "–õ–∏–±–æ —É —Ç–µ–±—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Ö –Ω–µ—Ç, –ª–∏–±–æ –∏—Ö –µ—â–µ –Ω–µ —É—Å–ø–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å."
        return "\n".join(res)
